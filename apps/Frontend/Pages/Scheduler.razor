@page "/scheduler"

@using Models.Appointments;
@using Services.Appointments;

@inject DialogService DialogService
@inject ICalendarService CalendarService 

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="StartDateTime" EndProperty="EndDateTime"
    TextProperty="Subject" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@*<EventConsole @ref=@console />*@

@code {
    RadzenScheduler<Appointment> scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments;
    Calendar calendar;

    protected async override Task OnInitializedAsync()
    {
        var calendars = await CalendarService.GetCalendarByUserId(Guid.Parse("E37C8D1F-04BE-402E-A584-EFD46DBC3BE9"));
        if (calendars.FirstOrDefault() != null) {

            calendar = calendars.FirstOrDefault();
            appointments = await CalendarService.GetAppointmentsByCalendarId(
                                    Guid.Parse(calendar.CalendarId)
                                );
        }

    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Subject == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
    }